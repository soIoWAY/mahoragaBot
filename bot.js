require('dotenv').config()
const { Telegraf } = require('telegraf')
const sqlite3 = require('sqlite3').verbose()
const { Client } = require('pg')
const axios = require('axios')

const token = process.env.TOKEN
const bot = new Telegraf(token)

const client = new Client({
	connectionString: process.env.DATABASE_URL,
	ssl: {
		rejectUnauthorized: false,
	},
})

client
	.connect()
	.then(() => console.log('–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö PostgreSQL'))
	.catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–¥: ', err))

const createTableQuery = `
  CREATE TABLE IF NOT EXISTS user_messages (
    id SERIAL PRIMARY KEY,
    user_id INTEGER,
    username TEXT,
    message_count INTEGER DEFAULT 0,
    ban_message_count INTEGER DEFAULT 0
  );
`
client
	.query(createTableQuery)
	.then(() => console.log('–¢–∞–±–ª–∏—Ü—è user_messages —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ'))
	.catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ:', err))

async function updateBanMessageCount(user_id, username) {
	try {
		const query = 'SELECT * FROM user_messages WHERE user_id = $1'
		const { rows } = await client.query(query, [user_id])

		if (rows.length === 0) {
			const insertQuery =
				'INSERT INTO user_messages (user_id, username, ban_message_count) VALUES ($1, $2, 1)'
			await client.query(insertQuery, [user_id, username])
		} else {
			const updateQuery =
				'UPDATE user_messages SET ban_message_count = ban_message_count + 1 WHERE user_id = $1'
			await client.query(updateQuery, [user_id])
		}
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –±–¥: ', err)
	}
}

async function updateMessageCount(user_id, username) {
	try {
		const query = 'SELECT * FROM user_messages WHERE user_id = $1'
		const { rows } = await client.query(query, [user_id])

		if (rows.length === 0) {
			const insertQuery =
				'INSERT INTO user_messages (user_id, username, message_count) VALUES ($1, $2, 1)'
			await client.query(insertQuery, [user_id, username])
		} else {
			const updateQuery =
				'UPDATE user_messages SET message_count = message_count + 1 WHERE user_id = $1'
			await client.query(updateQuery, [user_id])
		}
		console.log('–û–Ω–æ–≤–ª–µ–Ω–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', username)
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:', err)
	}
}

async function topUsersByMessage() {
	try {
		const query = `
			SELECT username, message_count, ban_message_count 
			FROM user_messages 
			ORDER BY (message_count + ban_message_count) DESC 
			LIMIT 10;
		`
		const { rows } = await client.query(query)

		return rows
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–¥:', err)
	}
}

async function sendMessages(ctx, messages, delay) {
	for (const message of messages) {
		try {
			if (!message.includes('.gif')) {
				await ctx.reply(message)
			} else {
				await ctx.replyWithAnimation(message)
			}
			await new Promise(resolve => setTimeout(resolve, delay))
		} catch (err) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ', err)
		}
	}
}

bot.start(async ctx => {
	const messages = [
		'–ù–µ—Ö–∞–π –∫–æ–ª–æ –≤–∞—à–µ –ø–æ—á–Ω–µ —Å–≤—ñ–π —Ä—É—Ö –æ —Å–≤—è—Ç–æ—Å—Ç–µ!',
		'–í–æ—Å—å–º–∏—Ä—É—á–Ω–∏–π –º–µ—á!',
		'–°–≤—è—Ç–∏–π –≤–æ—î–≤–æ–¥–∞!',
		'–ú–ê–•–û–†–ê–ì–ê!',
	]
	await sendMessages(ctx, messages, 800)
})

bot.command('weatherNow', async ctx => {
	try {
		const weatherApi =
			'https://api.open-meteo.com/v1/forecast?latitude=49.78&longitude=23.64&current=temperature_2m,wind_speed_10m&hourly=temperature_2m,relative_humidity_2m,wind_speed_10m&timezone=Europe/Kiev'

		const res = await axios.get(weatherApi)
		const temp = res.data.current.temperature_2m
		const wind = res.data.current.wind_speed_10m
		const isoTime = res.data.current.time
		const date = new Date(isoTime)
		let hours = date.getHours()
		let minutes = date.getMinutes()
		let formattedTime = `${hours}:${minutes < 10 ? '0' : ''}${minutes}`
		await ctx.reply(
			`–ß–∞—Å: ${formattedTime} ‚è∞\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temp}¬∞C üå°\n–®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: ${wind}km/h üí®`
		)
	} catch (err) {
		console.error(err)
	}
})

bot.command('topm', async ctx => {
	try {
		const rows = await topUsersByMessage()

		let message = '–¢–æ–ø –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n'
		rows.forEach((row, index) => {
			message += `${index + 1}. @${row.username} - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${
				row.message_count + row.ban_message_count
			}, –∑ –Ω–∏—Ö –º–∞—Ç—ñ–≤: ${row.ban_message_count}\n`
		})

		await ctx.reply(message)
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ topm: ', err)
	}
})
bot.command('rtg', async ctx => {
	try {
		await ctx.reply('–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—ó... ü§û')
		setTimeout(async () => {
			await ctx.reply('–ù–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∞ –ø–æ—Ä–æ–∂–Ω–µ—á–∞!')
			setTimeout(async () => {
				await ctx.replyWithAnimation(
					'https://media1.tenor.com/m/FdEyz5OrqLwAAAAC/jjk.gif'
				)
			}, 750)
		}, 750)
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ rtg: ', err)
	}
})

bot.command('purple', async ctx => {
	const messages = [
		'Phase twilight',
		'Eyes of wisdom',
		'Nine ropes',
		'Crow and declaration',
		'Between front and back',
		'Hollow... Purple',
		'https://media1.tenor.com/m/DSyo0NKX8gMAAAAC/gojo-satoru.gif',
	]
	await sendMessages(ctx, messages, 800)
})

bot.on('text', async ctx => {
	const messageText = ctx.message.text
	const username = ctx.message.from.username
	const clowns = ['–¥—ñ–º', '–º–∞—Ç–≤', '—á—É–¥–æ', '–∫–æ–ª–ø–∞–∫–æ–≤']
	const banWords = [
		'—Å—É–∫',
		'–±–ª—è',
		'–ø—ñ–∑–¥–∞',
		'—É–π–æ–±–∏—â',
		'—î–±–∞–ª–æ',
		'—ó–±–∞',
		'–ø–µ–∑–¥',
		'–π–æ–±–Ω—É—Ç',
		'–ø—ñ–¥–∞—Ä',
		'–¥–µ–±—ñ–ª',
		'–ª–æ—Ö',
		'—Ö—É–π',
	]
	if (
		messageText.toLocaleLowerCase().includes('–∂—ñ–Ω–∫–∞') ||
		messageText === '–ú–ê–•–û–†–ê–ì–ê –•–ï–õ–ü'
	) {
		try {
			await ctx.replyWithAnimation(
				'https://media1.tenor.com/m/xxTiQVYbcAAAAAAd/jujutsu-kaisen-shibuya-arc-mahoraga-shibuya-arc.gif'
			)
		} catch (err) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó: ', err)
		}
	} else if (
		messageText.includes('@general_mahoraga_bot') &&
		username !== 'xzvetal'
	) {
		try {
			await ctx.reply('–ê–ª–ª–æ –±–µ–∑–¥–∞—Ä–Ω—ñ—Å—Ç—å, —è–∫ —Ç–∏ —Å–º—ñ—î—à –º–µ–Ω–µ —Ç–µ–≥–∞—Ç–∏?!')
		} catch (error) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ', error)
		}
	} else if (messageText.includes('–ú–ê–•–û–†–ê–ì–ê') && username !== 'xzvetal') {
		try {
			await ctx.reply('*–ø–ª—é–Ω—É–≤*')
		} catch (error) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ', error)
		}
	} else if (
		messageText === '@general_mahoraga_bot' ||
		(messageText === '–ú–ê–•–û–†–ê–ì–ê' && username === 'xzvetal')
	) {
		try {
			await ctx.reply('–í–∞—à –≤—ñ—Ä–Ω–∏–π —Å–ª—É–≥–∞ –¥–æ –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥!')
		} catch (error) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ', error)
		}
	} else if (
		messageText.toLocaleLowerCase().includes('—Ç–∏—Ö–æ') ||
		messageText.toLocaleLowerCase().includes('—Ç–∏—Ö–µ')
	) {
		try {
			await ctx.reply('–ì–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞?')
		} catch (error) {
			console.error(error)
		}
	} else if (messageText.toLocaleLowerCase().includes('—à–æ —Ç–æ –Ω–æ—Ä–º')) {
		try {
			await ctx.reply('–ê —è–∫–µ')
		} catch (error) {
			console.error(error)
		}
	} else if (messageText.toLocaleLowerCase().includes('—à–∫–æ–ª')) {
		try {
			await ctx.reply('–¢–æ–ø—Ç–∞–≤ —Ç—É —à–∫–æ–ª—É')
		} catch (error) {
			console.error(error)
		}
	} else if (messageText.toLocaleLowerCase().includes('—Ç–∏ –ø—Ä–æ–≥—Ä–∞—î—à')) {
		try {
			await ctx.reply('Nah, Id Adapt')
		} catch (error) {
			console.error(error)
		}
	} else if (
		clowns.some(clown => messageText.toLocaleLowerCase().includes(clown))
	) {
		try {
			await ctx.reply(
				`–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•–ê–•–•–ê–•–ê–• –ù–ê–•–£–Ø –í–ò –¢–û –ß–ï–†–ü–ê–¶–¨–ö–ï –Ü–ú–Ø –ó–ì–ê–î–£–Ñ–¢–ï`
			)
		} catch (error) {
			console.error(error)
		}
	} else if (
		banWords.some(word => messageText.toLocaleLowerCase().includes(word))
	) {
		try {
			const user_id = ctx.message.from.id
			const username = ctx.message.from.username
			await updateBanMessageCount(user_id, username)
		} catch (error) {
			console.error(error)
		}
	} else if (messageText.toLocaleLowerCase() === '–º–∞–∫—Å') {
		try {
			await ctx.replyWithPhoto('https://i.imgur.com/tKeUWiN.jpeg')
		} catch (error) {
			console.error(error)
		}
	} else {
		const user_id = ctx.message.from.id
		const username = ctx.message.from.username
		await updateMessageCount(user_id, username)
	}
})

bot.launch()

process.once('SIGINT', async () => {
	try {
		console.log('–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ Telegraf...')
		await bot.stop()
		console.log('–ë–æ—Ç Telegraf –∑—É–ø–∏–Ω–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ')

		console.log("–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL...")
		await client.end()
		console.log("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL –∑–∞–∫—Ä–∏—Ç–µ —É—Å–ø—ñ—à–Ω–æ")

		process.exit(0)
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–æ–¥–∞—Ç–∫–∞:', err)
		process.exit(1)
	}
})

process.once('SIGTERM', async () => {
	try {
		console.log('–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞ Telegraf...')
		await bot.stop()
		console.log('–ë–æ—Ç Telegraf –∑—É–ø–∏–Ω–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ')

		console.log("–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL...")
		await client.end()
		console.log("–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö PostgreSQL –∑–∞–∫—Ä–∏—Ç–µ —É—Å–ø—ñ—à–Ω–æ")

		process.exit(0)
	} catch (err) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–æ–¥–∞—Ç–∫–∞:', err)
		process.exit(1)
	}
})
